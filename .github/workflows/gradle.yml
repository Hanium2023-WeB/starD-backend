name: CI/CD

# event trigger
on:
  push:
    branches: 
      - "master" # master 브랜치일 때 배포 수행
      - "develop" # develop 브랜치일 때 테스트 수행
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin' # https://github.com/actions/setup-java
        
      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: 
          chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ## Gradle test
      - name: Run tests
        run: ./gradlew test
        shell: bash
    if: github.ref == 'refs/heads/develop'

  deploy:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
        
      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Grant execute permission for gradlew
        run: 
          chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

     ## create application-prod.yml
      - name: Create application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.yml
        shell: bash
        if: github.ref == 'refs/heads/master'
      
      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}
        if: github.ref == 'refs/heads/master'
      
      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.6
        id: deploy-prod
        with:
          host: ${{ secrets.EC2_HOST_PROD }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          envs: GITHUB_SHA
          script: |
            echo test1234 > test.txt
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            docker-compose up -d
            docker image prune -f
        if: github.ref == 'refs/heads/master'
